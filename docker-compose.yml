version: '3.1'
services:
  the_monkeys_db:
    container_name: "the-monkeys-psql"
    image: bitnami/postgresql:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: Secret
      POSTGRES_USER: root
      POSTGRES_DB: the_monkeys_user_dev
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: repl_user
      POSTGRES_REPLICATION_PASSWORD: repl_password
      POSTGRES_NUM_SYNCHRONOUS_REPLICAS: 1
      POSTGRES_SYNCHRONOUS_COMMIT_MODE: on
    ports:
      - 1234:5432
    networks:
      - monkeys-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 5s
      timeout: 5s
      retries: 5

  the_monkeys_db_replica:
    container_name: "the-monkeys-psql-replica"
    image: bitnami/postgresql:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: Secret
      POSTGRES_USER: root
      POSTGRES_DB: the_monkeys_user_dev
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_MASTER_HOST: the_monkeys_db
      POSTGRES_MASTER_PORT_NUMBER: 5432
      POSTGRES_REPLICATION_USER: repl_user
      POSTGRES_REPLICATION_PASSWORD: repl_password
      POSTGRES_PRIMARY_HOST: the_monkeys_db
      POSTGRES_PRIMARY_PORT_NUMBER: 5432
    ports:
      - 1235:5432
    networks:
      - monkeys-network
    volumes:
      - postgres_data_replica:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-migrations:
    container_name: "the-monkeys-migrate"
    image: migrate/migrate:v4.15.2
    volumes:
      - ./schema:/migrations
    networks:
      - monkeys-network
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgres://root:Secret@the_monkeys_db:5432/the_monkeys_user_dev?sslmode=disable",
      ]
    command: ["up"]
    depends_on:
      the_monkeys_db:
        condition: service_healthy
    restart: on-failure

  opensearch-node1:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - plugins.security.disabled=true
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - discovery.seed_hosts=opensearch-node1
      - cluster.initial_cluster_manager_nodes=opensearch-node1
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=a!Too5hortPassword@1
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data
    ports:
      - 9200:9200
      - 9600:9600
    networks:
      - monkeys-network
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: the-monkeys-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - monkeys-network
    environment:
      RABBITMQ_DEFAULT_USER: myuser
      RABBITMQ_DEFAULT_PASS: mypassword
      RABBITMQ_DISK_FREE_LIMIT: "50MB"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '512M'
        reservations:
          cpus: '0.5'
          memory: '256M'

  the_monkeys_gateway:
    container_name: "the-monkeys-gateway"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
    volumes:
      - .:/go/src/app
    ports:
      - "8081:8081"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_gateway/main.go

  the_monkeys_authz:
    container_name: "the-monkeys-auth"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
    volumes:
      - .:/go/src/app
    ports:
      - "50051:50051"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_authz/main.go

  the_monkeys_file_server:
    container_name: "the-monkeys-file-server"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
    volumes:
      - .:/go/src/app
      - the_monkeys_profile:/profile
      - blogs_volume:/blogs
    ports:
      - "50054:50054"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_file_storage/main.go

  the_monkeys_user:
    container_name: "the-monkeys-user"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
    volumes:
      - .:/go/src/app
    ports:
      - "50053:50053"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_users/main.go

  the_monkeys_blog:
    container_name: "the-monkeys-blog"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - opensearch-node1
    volumes:
      - .:/go/src/app
    ports:
      - "50052:50052"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_blog/main.go
  
  vault:
    container_name: vault
    image: hashicorp/vault:latest
    networks:
      - monkeys-network
    ports:
      - 8200:8200
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_DEV_ROOT_TOKEN_ID=myroot


networks:
  monkeys-network:
    driver: bridge

volumes:
  postgres_data:
  postgres_data_replica:
  the_monkeys_profile:
  blogs_volume:
  rabbitmq_data:
  opensearch-data1:
    driver: local
